=== RUN   TestBackgroundDebugConsoleInterface
=== RUN   TestBackgroundDebugConsoleInterface/BackgroundDebugConsole_interface_should_be_implemented
    ppu_background_debug_console_test.go:84: PPU should implement BackgroundDebugConsole interface for console-based background debugging
--- FAIL: TestBackgroundDebugConsoleInterface (0.00s)
    --- FAIL: TestBackgroundDebugConsoleInterface/BackgroundDebugConsole_interface_should_be_implemented (0.00s)
=== RUN   TestBackgroundDebugCapabilitiesNotImplemented
=== RUN   TestBackgroundDebugCapabilitiesNotImplemented/BackgroundDebugger_interface_not_implemented
=== RUN   TestBackgroundDebugCapabilitiesNotImplemented/BackgroundDebugConsole_interface_not_implemented
=== RUN   TestBackgroundDebugCapabilitiesNotImplemented/BackgroundRealTimeDebugger_interface_not_implemented
--- PASS: TestBackgroundDebugCapabilitiesNotImplemented (0.00s)
    --- PASS: TestBackgroundDebugCapabilitiesNotImplemented/BackgroundDebugger_interface_not_implemented (0.00s)
    --- PASS: TestBackgroundDebugCapabilitiesNotImplemented/BackgroundDebugConsole_interface_not_implemented (0.00s)
    --- PASS: TestBackgroundDebugCapabilitiesNotImplemented/BackgroundRealTimeDebugger_interface_not_implemented (0.00s)
=== RUN   TestBackgroundDebugTestCoverage
    ppu_background_debug_summary_test.go:52: The comprehensive background debug test suite covers 12 key areas:
    ppu_background_debug_summary_test.go:54: 1. nametable visualization and inspection
    ppu_background_debug_summary_test.go:54: 2. tile inspection and analysis
    ppu_background_debug_summary_test.go:54: 3. scroll debugging and tracking
    ppu_background_debug_summary_test.go:54: 4. real-time background state monitoring
    ppu_background_debug_summary_test.go:54: 5. background rendering performance metrics
    ppu_background_debug_summary_test.go:54: 6. debug console output
    ppu_background_debug_summary_test.go:54: 7. live state inspection
    ppu_background_debug_summary_test.go:54: 8. frame-by-frame analysis
    ppu_background_debug_summary_test.go:54: 9. performance monitoring
    ppu_background_debug_summary_test.go:54: 10. memory access tracking
    ppu_background_debug_summary_test.go:54: 11. scanline debugging
    ppu_background_debug_summary_test.go:54: 12. pixel tracing
    ppu_background_debug_summary_test.go:97: When implemented, the background debug system should provide:
    ppu_background_debug_summary_test.go:99: 
        Nametable Analysis:
    ppu_background_debug_summary_test.go:101:   - Visual representation of nametable contents
    ppu_background_debug_summary_test.go:101:   - Tile-by-tile inspection
    ppu_background_debug_summary_test.go:101:   - Attribute table analysis
    ppu_background_debug_summary_test.go:101:   - Nametable switching detection
    ppu_background_debug_summary_test.go:99: 
        Tile Debugging:
    ppu_background_debug_summary_test.go:101:   - Pattern table visualization
    ppu_background_debug_summary_test.go:101:   - Individual tile inspection
    ppu_background_debug_summary_test.go:101:   - Tile usage statistics
    ppu_background_debug_summary_test.go:101:   - Duplicate tile detection
    ppu_background_debug_summary_test.go:99: 
        Scroll Debugging:
    ppu_background_debug_summary_test.go:101:   - Real-time scroll position tracking
    ppu_background_debug_summary_test.go:101:   - Scroll change event logging
    ppu_background_debug_summary_test.go:101:   - Smooth scrolling analysis
    ppu_background_debug_summary_test.go:101:   - VRAM address decomposition
    ppu_background_debug_summary_test.go:99: 
        Performance Analysis:
    ppu_background_debug_summary_test.go:101:   - Tile fetch timing analysis
    ppu_background_debug_summary_test.go:101:   - Pixel rendering efficiency
    ppu_background_debug_summary_test.go:101:   - Memory access optimization
    ppu_background_debug_summary_test.go:101:   - Bottleneck identification
    ppu_background_debug_summary_test.go:99: 
        Real-time Monitoring:
    ppu_background_debug_summary_test.go:101:   - Live PPU state inspection
    ppu_background_debug_summary_test.go:101:   - Shift register state tracking
    ppu_background_debug_summary_test.go:101:   - Pipeline stage monitoring
    ppu_background_debug_summary_test.go:101:   - Frame-by-frame comparison
    ppu_background_debug_summary_test.go:99: 
        Console Interface:
    ppu_background_debug_summary_test.go:101:   - Interactive debug commands
    ppu_background_debug_summary_test.go:101:   - Formatted output display
    ppu_background_debug_summary_test.go:101:   - Debug logging and filtering
    ppu_background_debug_summary_test.go:101:   - Session management
--- PASS: TestBackgroundDebugTestCoverage (0.00s)
=== RUN   TestBackgroundDebugDesignPrinciples
    ppu_background_debug_summary_test.go:146: Background Debug Design Principles:
    ppu_background_debug_summary_test.go:148: 
        1. Comprehensive State Inspection
    ppu_background_debug_summary_test.go:149:    Description: Debug system should provide complete visibility into all background rendering state
    ppu_background_debug_summary_test.go:150:    Test Coverage: Tests verify access to nametables, tiles, scroll state, shift registers, and memory
    ppu_background_debug_summary_test.go:148: 
        2. Real-time Monitoring
    ppu_background_debug_summary_test.go:149:    Description: Debug information should be available during active rendering
    ppu_background_debug_summary_test.go:150:    Test Coverage: Tests verify live state inspection and frame-by-frame analysis capabilities
    ppu_background_debug_summary_test.go:148: 
        3. Performance Analysis
    ppu_background_debug_summary_test.go:149:    Description: Debug system should identify bottlenecks and optimization opportunities
    ppu_background_debug_summary_test.go:150:    Test Coverage: Tests verify timing analysis, efficiency metrics, and optimization suggestions
    ppu_background_debug_summary_test.go:148: 
        4. Interactive Debugging
    ppu_background_debug_summary_test.go:149:    Description: Debug system should provide console interface for dynamic exploration
    ppu_background_debug_summary_test.go:150:    Test Coverage: Tests verify command execution, formatted output, and session management
    ppu_background_debug_summary_test.go:148: 
        5. Issue Detection
    ppu_background_debug_summary_test.go:149:    Description: Debug system should automatically identify common rendering problems
    ppu_background_debug_summary_test.go:150:    Test Coverage: Tests verify automated issue detection and suggested fixes
    ppu_background_debug_summary_test.go:148: 
        6. Data Visualization
    ppu_background_debug_summary_test.go:149:    Description: Complex debug data should be presented in human-readable formats
    ppu_background_debug_summary_test.go:150:    Test Coverage: Tests verify nametable visualization, tile representation, and formatted output
--- PASS: TestBackgroundDebugDesignPrinciples (0.00s)
=== RUN   TestBackgroundDebugImplementationGuidance
    ppu_background_debug_summary_test.go:220: Recommended Implementation Phases:
    ppu_background_debug_summary_test.go:222: 
        Phase 1: Core Debug Infrastructure (Priority: High, Complexity: Medium):
    ppu_background_debug_summary_test.go:224:   - BackgroundDebugger interface implementation
    ppu_background_debug_summary_test.go:224:   - Basic nametable inspection
    ppu_background_debug_summary_test.go:224:   - Tile debugging foundation
    ppu_background_debug_summary_test.go:224:   - Debug data structures
    ppu_background_debug_summary_test.go:222: 
        Phase 2: Real-time Monitoring (Priority: High, Complexity: High):
    ppu_background_debug_summary_test.go:224:   - Live state inspection
    ppu_background_debug_summary_test.go:224:   - Performance metrics collection
    ppu_background_debug_summary_test.go:224:   - Memory access tracking
    ppu_background_debug_summary_test.go:224:   - Frame-by-frame analysis
    ppu_background_debug_summary_test.go:222: 
        Phase 3: Console Interface (Priority: Medium, Complexity: Medium):
    ppu_background_debug_summary_test.go:224:   - Interactive debug commands
    ppu_background_debug_summary_test.go:224:   - Formatted output generation
    ppu_background_debug_summary_test.go:224:   - Debug session management
    ppu_background_debug_summary_test.go:224:   - Log filtering and search
    ppu_background_debug_summary_test.go:222: 
        Phase 4: Advanced Analysis (Priority: Medium, Complexity: High):
    ppu_background_debug_summary_test.go:224:   - Pipeline analysis
    ppu_background_debug_summary_test.go:224:   - Issue detection algorithms
    ppu_background_debug_summary_test.go:224:   - Optimization suggestions
    ppu_background_debug_summary_test.go:224:   - Comparative analysis
    ppu_background_debug_summary_test.go:222: 
        Phase 5: Visualization & Integration (Priority: Low, Complexity: Medium):
    ppu_background_debug_summary_test.go:224:   - Advanced visualization features
    ppu_background_debug_summary_test.go:224:   - Integration test completion
    ppu_background_debug_summary_test.go:224:   - Performance optimization
    ppu_background_debug_summary_test.go:224:   - Documentation and examples
    ppu_background_debug_summary_test.go:228: 
        Key Implementation Considerations:
    ppu_background_debug_summary_test.go:240: 1. Maintain zero-overhead when debugging is disabled
    ppu_background_debug_summary_test.go:240: 2. Use efficient data structures for real-time monitoring
    ppu_background_debug_summary_test.go:240: 3. Provide both detailed and summary-level debug information
    ppu_background_debug_summary_test.go:240: 4. Ensure thread-safety for concurrent access to debug data
    ppu_background_debug_summary_test.go:240: 5. Design extensible interfaces for future debug capabilities
    ppu_background_debug_summary_test.go:240: 6. Include comprehensive error handling and validation
    ppu_background_debug_summary_test.go:240: 7. Optimize for both development and production debugging
--- PASS: TestBackgroundDebugImplementationGuidance (0.00s)
=== RUN   TestBackgroundDebuggerInterface
=== RUN   TestBackgroundDebuggerInterface/BackgroundDebugger_interface_should_be_implemented
    ppu_background_debug_test.go:214: PPU should implement BackgroundDebugger interface for comprehensive background debugging
--- FAIL: TestBackgroundDebuggerInterface (0.00s)
    --- FAIL: TestBackgroundDebuggerInterface/BackgroundDebugger_interface_should_be_implemented (0.00s)
=== RUN   TestRealTimeBackgroundStateMonitoring
--- FAIL: TestRealTimeBackgroundStateMonitoring (0.00s)
panic: interface conversion: *ppu.PPU is not ppu.BackgroundDebugger: missing method EnableBackgroundDebugLogging [recovered]
	panic: interface conversion: *ppu.PPU is not ppu.BackgroundDebugger: missing method EnableBackgroundDebugLogging

goroutine 29 [running]:
testing.tRunner.func1.2({0x574220, 0xc0000ae750})
	/usr/lib/go-1.23/src/testing/testing.go:1632 +0x230
testing.tRunner.func1()
	/usr/lib/go-1.23/src/testing/testing.go:1635 +0x35e
panic({0x574220?, 0xc0000ae750?})
	/usr/lib/go-1.23/src/runtime/panic.go:785 +0x132
gones/internal/ppu.TestRealTimeBackgroundStateMonitoring(0xc0000d16c0)
	/home/claude/work/gones/internal/ppu/ppu_background_debug_test.go:549 +0x188
testing.tRunner(0xc0000d16c0, 0x5b5358)
	/usr/lib/go-1.23/src/testing/testing.go:1690 +0xf4
created by testing.(*T).Run in goroutine 1
	/usr/lib/go-1.23/src/testing/testing.go:1743 +0x390
FAIL	gones/internal/ppu	0.005s
FAIL
# gones/test/integration [gones/test/integration.test]
test/integration/ppu_frame_buffer_diagnostic_test.go:120:6: PPUStateSnapshot redeclared in this block
	test/integration/ppu_background_debug_integration_test.go:514:6: other declaration of PPUStateSnapshot
test/integration/ppu_background_debug_integration_test.go:14:6: undefined: ppu.BackgroundDebugger
test/integration/ppu_background_debug_integration_test.go:15:6: undefined: ppu.BackgroundDebugConsole
test/integration/ppu_background_debug_integration_test.go:16:6: undefined: ppu.BackgroundRealTimeDebugger
test/integration/ppu_background_debug_integration_test.go:64:32: undefined: ppu.PerformanceAlert
test/integration/ppu_background_debug_integration_test.go:76:32: undefined: ppu.FrameAnalysisData
test/integration/ppu_background_debug_integration_test.go:77:32: undefined: ppu.ScanlineAnalysis
test/integration/ppu_background_debug_integration_test.go:78:32: undefined: ppu.MemoryAccessEvent
test/integration/ppu_background_debug_integration_test.go:79:32: undefined: ppu.PixelTraceResult
test/integration/ppu_background_debug_integration_test.go:538:26: undefined: ppu.ShiftRegisterState
test/integration/ppu_background_debug_integration_test.go:538:26: too many errors
FAIL	gones/test/integration [build failed]
FAIL
