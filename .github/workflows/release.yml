name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.23'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install SDL2 dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev
        
    - name: Run tests
      run: make test
      
    - name: Get version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
        
    - name: Cross-compile binaries
      run: |
        mkdir -p dist
        
        # Build for different platforms
        platforms=(
          "linux/amd64"
          "linux/arm64" 
          "darwin/amd64"
          "darwin/arm64"
          "windows/amd64"
        )
        
        for platform in "${platforms[@]}"; do
          GOOS=${platform%/*}
          GOARCH=${platform#*/}
          
          echo "Building for $GOOS/$GOARCH..."
          
          BINARY_NAME=gones
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME=gones.exe
          fi
          
          CGO_ENABLED=0
          if [ "$GOOS" = "linux" ]; then
            CGO_ENABLED=1
          fi
          
          env GOOS=$GOOS GOARCH=$GOARCH CGO_ENABLED=$CGO_ENABLED go build \
            -ldflags "-X gones/internal/version.Version=${{ steps.version.outputs.version }} \
                     -X gones/internal/version.GitCommit=${{ github.sha }} \
                     -X gones/internal/version.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) \
                     -X gones/internal/version.BuildUser=github-actions" \
            -o dist/${BINARY_NAME} ./cmd/gones
            
          # Create release archive
          ARCHIVE_NAME=gones-${{ steps.version.outputs.version_number }}-${GOOS}-${GOARCH}
          if [ "$GOOS" = "windows" ]; then
            zip -j dist/${ARCHIVE_NAME}.zip dist/${BINARY_NAME} README.md LICENSE
          else
            tar -czf dist/${ARCHIVE_NAME}.tar.gz -C dist ${BINARY_NAME} -C .. README.md LICENSE
          fi
          
          rm dist/${BINARY_NAME}
        done
        
    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          CHANGES=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
        else
          CHANGES=$(git log --pretty=format:"- %s")
        fi
        
        # Create changelog
        cat > CHANGELOG.md << EOF
        ## Changes in ${{ steps.version.outputs.version }}
        
        $CHANGES
        
        ## Downloads
        
        Choose the appropriate binary for your platform:
        
        - **Linux (x64)**: gones-${{ steps.version.outputs.version_number }}-linux-amd64.tar.gz
        - **Linux (ARM64)**: gones-${{ steps.version.outputs.version_number }}-linux-arm64.tar.gz  
        - **macOS (x64)**: gones-${{ steps.version.outputs.version_number }}-darwin-amd64.tar.gz
        - **macOS (ARM64)**: gones-${{ steps.version.outputs.version_number }}-darwin-arm64.tar.gz
        - **Windows (x64)**: gones-${{ steps.version.outputs.version_number }}-windows-amd64.zip
        
        ## Installation
        
        1. Download the appropriate binary for your platform
        2. Extract the archive
        3. Run \`./gones -help\` to see available options
        4. Place ROM files in a \`roms/\` directory
        5. Run \`./gones -rom path/to/game.nes\`
        
        ## Docker
        
        You can also run gones using Docker:
        
        \`\`\`bash
        docker run --rm -it ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
        \`\`\`
        
        ## Requirements
        
        - **Linux**: SDL2 development libraries (\`sudo apt-get install libsdl2-dev\`)
        - **macOS**: SDL2 framework (install via Homebrew: \`brew install sdl2\`)
        - **Windows**: SDL2.dll (included in release)
        EOF
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        files: |
          dist/gones-*.tar.gz
          dist/gones-*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract Docker metadata
      id: docker_meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest
          
    - name: Build and push release Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.docker_meta.outputs.tags }}
        labels: ${{ steps.docker_meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          GIT_COMMIT=${{ github.sha }}
          BUILD_TIME=${{ steps.docker_meta.outputs.date }}
          BUILD_USER=github-actions