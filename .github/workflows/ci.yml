name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install SDL2 dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev
        
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run vet
      run: go vet ./...
      
    - name: Run tests
      run: make test
      
    - name: Run core component tests
      run: |
        go test ./internal/cpu -v
        go test ./internal/ppu -v
        go test ./internal/memory -v
        go test ./internal/cartridge -v

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper version detection
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install SDL2 dependencies (Linux only)
      if: matrix.goos == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev
        
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: ${{ matrix.goos == 'linux' && '1' || '0' }}
      run: |
        VERSION=$(git describe --tags --exact-match 2>/dev/null || echo "dev-$(git rev-parse --short HEAD)")
        GIT_COMMIT=$(git rev-parse HEAD)
        BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        BUILD_USER="github-actions"
        
        BINARY_NAME=gones
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME=gones.exe
        fi
        
        go build \
          -ldflags "-X gones/internal/version.Version=$VERSION \
                   -X gones/internal/version.GitCommit=$GIT_COMMIT \
                   -X gones/internal/version.BuildTime=$BUILD_TIME \
                   -X gones/internal/version.BuildUser=$BUILD_USER" \
          -o dist/gones-${{ matrix.goos }}-${{ matrix.goarch }}/${BINARY_NAME} \
          ./cmd/gones
          
    - name: Create build info
      run: |
        mkdir -p dist/gones-${{ matrix.goos }}-${{ matrix.goarch }}
        echo "OS: ${{ matrix.goos }}" > dist/gones-${{ matrix.goos }}-${{ matrix.goarch }}/BUILD_INFO.txt
        echo "Architecture: ${{ matrix.goarch }}" >> dist/gones-${{ matrix.goos }}-${{ matrix.goarch }}/BUILD_INFO.txt
        echo "Go Version: ${{ env.GO_VERSION }}" >> dist/gones-${{ matrix.goos }}-${{ matrix.goarch }}/BUILD_INFO.txt
        echo "Build Time: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> dist/gones-${{ matrix.goos }}-${{ matrix.goarch }}/BUILD_INFO.txt
        echo "Git Commit: $(git rev-parse HEAD)" >> dist/gones-${{ matrix.goos }}-${{ matrix.goarch }}/BUILD_INFO.txt
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gones-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/gones-${{ matrix.goos }}-${{ matrix.goarch }}/
        retention-days: 7

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ github.ref_name }}
          GIT_COMMIT=${{ github.sha }}
          BUILD_TIME=${{ steps.meta.outputs.date }}
          BUILD_USER=github-actions
        cache-from: type=gha
        cache-to: type=gha,mode=max

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install SDL2 dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev
        
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec.sarif ./...'
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif